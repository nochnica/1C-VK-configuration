	
#Область Переопределяемые 

// Подумать над добавлением сюда константы
Функция ПолучитьAccessToken() 
	Возврат "vk1.a.A64YqTgIedBRS3w2P5XGGYTwsEaDyijLMDDk3B4d7ONYOfQUf2FiJCASwICmK76txGaU92M7_504ozqjinb3Ofktz741cgiXEyNxymUYgI0OwKjjo11pjfL9LOjL6g1xIQW4MGfLdQPnYm2NfQWv1Lrgd-u4zPPxlEmNWVR-1D0ymb6MAw4Dl7VDNs89_ANCVSVk6IKK596Is0Yjaixxew";
КонецФункции

Функция ПолучитьПутьКФайлуЛога()
	Возврат "C:\Users\hellawes\desktop\1CVKlog.txt";	
КонецФункции

#КонецОбласти



#Область СлужебныеПроцедурыИФункции  
   
Функция ЗаписатьЛог(Данные) Экспорт 
	
	Попытка    
		
		ИмяФайлаЛога = ПолучитьПутьКФайлуЛога();
		ФайлЛога = Новый Файл(ИмяФайлаЛога);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Если НЕ ФайлЛога.Существует() Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Данные);
		Иначе
			ТекстовыйДокумент.Прочитать(ИмяФайлаЛога);
			ТекстовыйДокумент.ДобавитьСтроку(Данные);
		КонецЕсли;
		
		ТекстовыйДокумент.ЗаменитьСтроку(ИмяФайлаЛога);
		
	Исключение
	КонецПопытки;        
КонецФункции 

// Функция принимает JSON-строку и пытается преобразовать её в структуру 1С
Функция ОбработатьJSON(СтрокаJSON) Экспорт  
	СтруктураВозврата = Новый Структура;
	
	Попытка 
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);       
		// Преобразуем JSON в Структуру
		СтруктураВозврата = ПрочитатьJSON(Чтение);
	Исключение  
	КонецПопытки;
	
	Возврат СтруктураВозврата;	
КонецФункции   

Функция СформироватьJSON(СтруктураДанных, ФормироватьСПереносами = Ложь) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	Если ФормироватьСПереносами Тогда
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	Иначе
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
	КонецЕсли;
	
	НастройкаСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкаСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкаСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкаСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();	
КонецФункции

#КонецОбласти



#Область ВходящиеСообщения

// Процедура обрабатывает входящее HTTP-сообщение от сервера ВКонтакте
Процедура ОбработатьСообщениеИзВК(Запрос, Ответ) Экспорт
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку(); //получаем весь json одной длинной строкой	
	СтруктураДанных = ОбработатьJSON(СтрокаJSON); // Получили структуру из JSON-а
	
	// Обрабатываем сообщение в зависимости от его типа (confirmation, message_new и т.д.)
	ОбработатьВходящееСообщение(СтруктураДанных, Ответ);
КонецПроцедуры

// Формат запроса ВК:
//{
//    "group_id": 230152621,
//    "type": "message_new",
//    "event_id": "4ffab9fc1d5787be222141c390e3622274a8fcd3",
//    "v": "5.199",
//    "object": {
//        "client_info": {
//           <всякая информация> 
//        },
//        "message": {
//            "date": 1745157177,
//            "from_id": 552360884,
//            "id": 45,
//            "version": 10000118,
//            "out": 0,
//            "fwd_messages": [],
//            "important": false,
//            "is_hidden": false,
//            "attachments": [],
//            "conversation_message_id": 36,
//            "payload": "{\"command\":\"start\"}",
//            "text": "Start",
//            "peer_id": 552360884,
//            "random_id": 0
//        }
//    }
//}
Процедура ОбработатьВходящееСообщение(СтруктураДанных, Ответ)  
	// Если ВК пытается подтвердить адрес сервера, возвращаем ему нужную строку
	// Тут надо бы тащить строку из константы СтрокаПодтверждения, наверное
	Если СтруктураДанных.Свойство("type") И СтруктураДанных.type = "confirmation" Тогда
		Ответ.УстановитьТелоИзСтроки("61172d7c", "UTF-8"); 
		
	// Если пришло новое сообщение
	ИначеЕсли СтруктураДанных.Свойство("type") И СтруктураДанных.type = "message_new" Тогда
	    // Если object на месте
		Если СтруктураДанных.Свойство("object") Тогда  
			Попытка      
				ОбъектСообщение = СтруктураДанных.object.message;   
				random_id = Формат(ОбъектСообщение.random_id, "ЧРГ=''; ЧГ=0"); // В качестве рендом_ид лучше не использовать 0
				peer_id   = Формат(ОбъектСообщение.peer_id, "ЧРГ=''; ЧГ=0");
				from_id   = Формат(ОбъектСообщение.from_id, "ЧРГ=''; ЧГ=0");
				
				//Если ОбъектСообщение.Свойство("payload") И ЗначениеЗаполнено(ОбъектСообщение.payload) Тогда 
				//	payload = ОбработатьJSON(ОбъектСообщение.payload);
				//	Данные = СформироватьКлавиатуру(payload);
				//Иначе                                        
				//	Данные = СформироватьКлавиатуру();
				//КонецЕсли;       
				
				Данные = СформироватьКлавиатуру(ОбъектСообщение.text);
				Ответ.УстановитьТелоИзСтроки("ok", "UTF-8");
				message_send(random_id, peer_id, Данные.message, Данные.keyboard);
			Исключение   
				Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки(), "UTF-8");
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти



#Область Клавиатура

Функция СформироватьКлавиатуру(text = "", payload = "", level = 0, from_id = "") 
	Если text = "Snufkin" Тогда
		buttons = СформироватьГлавноеМеню();
		message = "Снусмумрик!! Привет!!";
	Иначе
		buttons = СформироватьГлавноеМеню(); 
		message = "Привет! Я бот 1С, У тебя в payload ничего нет"; 
	КонецЕсли;
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("keyboard", СформироватьJSONКлавиатуры(buttons));
	ДанныеВозврата.Вставить("message", message);
	
	Возврат ДанныеВозврата;

КонецФункции  

//Вот примерно так он выглядит
//{
//  "one_time": false,
//  "buttons":[
//    [
//      {
//        "action":{
//          "type":"location",
//          "payload":"{\"button\": \"1\"}"
//        }
//      }
//    ],
//    [
//      {
//        "action":{
//          "type":"vkpay",
//          "hash":"action=transfer-to-group&group_id=12345&aid=10"
//        }
//      }
//    ],
//    [
//      {
//        "action":{
//          "type":"text",
//          "payload":"{\"button\": \"1\"}",
//          "label":"Red"
//        },
//        "color":"negative"
//      },
//      {
//        "action":{
//          "type":"text",
//          "payload":"{\"button\": \"2\"}",
//          "label":"Green"
//        },
//        "color":"positive"
//      },
//      {
//        "action":{
//          "type":"text",
//          "payload":"{\"button\": \"2\"}",
//          "label":"Blue"
//        },
//        "color":"primary"
//      },
//      {
//        "action":{
//          "type":"text",
//          "payload":"{\"button\": \"2\"}",
//          "label":"White"
//        },
//        "color":"secondary"
//      }
//    ]
//  ]
//}
Функция СформироватьJSONКлавиатуры(buttons)
    keyboard = Новый Структура;
	keyboard.Вставить("one_time", false);
	keyboard.Вставить("buttons", buttons);
	
	keyboardJSON = СформироватьJSON(keyboard);
	
	Возврат keyboardJSON;
КонецФункции  

Функция СформироватьКнопку(label = "Test", payload_button, payload_level, color = "default", type = "text")
    СтруктураPayload = Новый Структура;
	//СтруктураPayload.Вставить("button", payload_button);
	//СтруктураPayload.Вставить("level", payload_level); 
	
	//СтруктураPayload.Вставить("button", payload_level);
	
	payload = СформироватьJSON(СтруктураPayload);
	
	action = Новый Структура;
	action.Вставить("type", type);
	action.Вставить("label", label);
	action.Вставить("payload", payload);
	
	button = Новый Структура;
	button.Вставить("action", action);
	button.Вставить("color", color); 
	
	Возврат button;
	
КонецФункции  

Функция СформироватьГлавноеМеню()
	buttons = Новый Массив; 
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("Snufkin", "snufkin", 1));
	buttons.Добавить(РядКнопок); 
	
	//РядКнопок = Новый Массив;
	//РядКнопок.Добавить(СформироватьКнопку("Anatoly", "anatoly", 1));
	//buttons.Добавить(РядКнопок); 
	//
	//РядКнопок = Новый Массив;
	//РядКнопок.Добавить(СформироватьКнопку("explore the space", "explore", 1));
	//buttons.Добавить(РядКнопок);
	
	Возврат buttons;
	
КонецФункции

#КонецОбласти


#Область МетодыAPI

Функция message_send(random_id = Неопределено, peer_id = Неопределено, 
					  message = Неопределено, keyboard = Неопределено)
					  
	parameters = Новый Массив;
	Если НЕ random_id = Неопределено Тогда
		parameters.Добавить("random_id=" + random_id);
	КонецЕсли;
	Если НЕ peer_id = Неопределено Тогда
		parameters.Добавить("peer_id=" + peer_id);		
	КонецЕсли;
	Если НЕ message = Неопределено Тогда
		parameters.Добавить("message=" + message);		
	КонецЕсли; 
	Если НЕ keyboard = Неопределено Тогда
		parameters.Добавить("keyboard=" + keyboard);		
	КонецЕсли;	
	
	ОтправитьЗапросВВК(ПолучитьAccessToken(), "messages.send", parameters);
	
КонецФункции

#КонецОбласти



#Область ИсходящиеСообщения

Функция ОтправитьЗапросВВК(access_token, method, parameters) Экспорт
    Результат = "";   

    Попытка
        ssl = Новый ЗащищенноеСоединениеOpenSSL();
        // Исправлен порт на 443
        СоединениеHTTP = Новый HTTPСоединение("api.vk.com", 443,,,, 60, ssl, Ложь);
        
        // Сформировать параметры строки
        ПараметрыМетода = "";
        Для каждого Строка Из parameters Цикл
            ПараметрыМетода = ПараметрыМетода + Строка + "&";
        КонецЦикла;

        ПолныйАдрес = "/method/" + method + "?" + ПараметрыМетода +
                      "access_token=" + access_token + "&v=5.199";          
        HTTPЗапрос = Новый HTTPЗапрос;
        HTTPЗапрос.АдресРесурса = ПолныйАдрес;

        РезультатЗапрос = СоединениеHTTP.Получить(HTTPЗапрос);
        СыроеТело = РезультатЗапрос.ПолучитьТелоКакСтроку();  
		Результат = СформироватьJSON(ОбработатьJSON(СыроеТело));

    Исключение
    КонецПопытки;

    Возврат Результат;
КонецФункции


#КонецОбласти
 