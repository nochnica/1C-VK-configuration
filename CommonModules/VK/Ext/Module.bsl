	
#Область Переопределяемые

Функция ПолучитьCommunityToken()
	Возврат "vk1.a.A64YqTgIedBRS3w2P5XGGYTwsEaDyijLMDDk3B4d7ONYOfQUf2FiJCASwICmK76txGaU92M7_504ozqjinb3Ofktz741cgiXEyNxymUYgI0OwKjjo11pjfL9LOjL6g1xIQW4MGfLdQPnYm2NfQWv1Lrgd-u4zPPxlEmNWVR-1D0ymb6MAw4Dl7VDNs89_ANCVSVk6IKK596Is0Yjaixxew";
КонецФункции

Функция ПолучитьПутьКФайлуЛога()
	Возврат "C:\1CVKlog.txt";	
КонецФункции

#КонецОбласти



#Область СлужебныеПроцедурыИФункции

Процедура ПриНачалеРаботыСистемы() Экспорт
    ЗаписатьЛог("=== РАСШИРЕНИЕ ПРОСНУЛОСЬ: " + ТекущаяДата() + " ===");
КонецПроцедуры  

Функция ЗаписатьЛог(Данные) Экспорт 
	
	Попытка    
		
		ИмяФайлаЛога = ПолучитьПутьКФайлуЛога();
		ФайлЛога = Новый Файл(ИмяФайлаЛога);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Если НЕ ФайлЛога.Существует() Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Данные);
		Иначе
			ТекстовыйДокумент.Прочитать(ИмяФайлаЛога);
			ТекстовыйДокумент.ДобавитьСтроку(Данные);
		КонецЕсли;
		
		ТекстовыйДокумент.ЗаменитьСтроку(ИмяФайлаЛога);
		
	Исключение
	КонецПопытки;        
КонецФункции 

Функция ОбработатьJSON(СтрокаJSON) Экспорт  
	СтруктураВозврата = Новый Структура;
	
	Попытка 
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		СтруктураВозврата = ПрочитатьJSON(Чтение);
	Исключение
	КонецПопытки;
	
	Возврат СтруктураВозврата;	
КонецФункции   

Функция СформироватьJSON(СтруктураДанных, ФормироватьСПереносами = Ложь) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	Если ФормироватьСПереносами Тогда
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	Иначе
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
	КонецЕсли;
	
	НастройкаСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкаСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкаСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкаСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();	
КонецФункции

#КонецОбласти



#Область Сообщения

Процедура ОбработатьСообщение(Запрос, Ответ) Экспорт
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
КонецПроцедуры

#КонецОбласти


// Создать ссылку получения токена
// Получение ссылки для интерактивного получения токена (access_token), который необходим
// для дальнейших действий
//
// Параметры:
//  app_id - Строка,Число - app_id из настроек приложения - app
//
// Возвращаемое значение:
//  Строка - URL, по которому необходимо перейти в браузере

//Процедура ОбработатьСообщениеИзВК(Запрос, Ответ) Экспорт
//	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
//	Ответ.УстановитьТелоИзСтроки("61172d7c", "UTF-8");
//КонецПроцедуры

//Функция ОбработатьJSON(СтрокаJSON) Экспорт
//	СтруктураВозврата = Новый Структура;
//	Попытка  
//		Чтение = Новый ЧтениеJSON;
//		Чтение.УстановитьСтроку(СтрокаJSON);
//		СтруктураВозврата = ПрочитатьJSON(Чтение);
//	Исключение
//	КонецПопытки;  
//	Возврат СтруктураВозврата
//КонецФункции

//Функция СформироватьJSON(СтруктураДанных, ФормироватьСПереносами = Ложь) Экспорт 
//	ЗаписьJSON = Новый ЗаписьJSON;
//	Если ФормироватьСПереносами Тогда    
//		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб)); 
//	Иначе
//		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));	
//	КонецЕсли ;
//	НастройкаСериализацииJSON = Новый НастройкиСериализацииJSON;
//	НастройкаСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
//	НастройкаСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
//	
//	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкаСериализацииJSON);
//	
//	Возврат ЗаписатьJSON.Закрыть();
//КонецФункции



// Функция СоздатьСсылкуПолученияТокена() Экспорт
//	ЗаписатьЛог("=== ЛОГ " + ТекущаяДата() + " ===");
    // Возврат "https://oauth.vk.com/authorize?client_id=53447325&…";
// КонецФункции   

  


//Функция КодироватьURL(Строка) Экспорт
//    СимволыБезКодирования = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~";
//    Результат = "";

//    Для Инд = 1 По СтрДлина(Строка) Цикл
//        Символ = Сред(Строка, Инд, 1);
//        Если Найти(СимволыБезКодирования, Символ) > 0 Тогда
//            Результат = Результат + Символ;
//        Иначе
//            Результат = Результат + "%" + Формат(КодСимвола(Символ), "ХЧ2");
//        КонецЕсли;
//    КонецЦикла;

//    Возврат Результат;
//КонецФункции

//// Универсальная функция для сборки GET‑строки
//Функция СформироватьПараметрыGET(СтруктураПараметров) Экспорт
//    Результат = "";

//    Для Каждого Параметр Из СтруктураПараметров Цикл
//        КодЗначения = КодироватьURL(Параметр.Значение);

//        Если Результат = "" Тогда
//            Результат = Параметр.Ключ + "=" + КодЗначения;
//        Иначе
//            Результат = Результат + "&" + Параметр.Ключ + "=" + КодЗначения;
//        КонецЕсли;
//    КонецЦикла;

//    Возврат Результат;
//КонецФункции

//Функция ПроверитьПодключениеVK() Экспорт
//    // 1) Формируем GET‑параметры
//    Параметры = Новый Структура(
//       "access_token", "vk1.a.A64YqTgIedBRS3w2P5XGGYTwsEaDyijLMDDk3B4d7ONYOfQUf2FiJCASwICmK76txGaU92M7_504ozqjinb3Ofktz741cgiXEyNxymUYgI0OwKjjo11pjfL9LOjL6g1xIQW4MGfLdQPnYm2NfQWv1Lrgd-u4zPPxlEmNWVR-1D0ymb6MAw4Dl7VDNs89_ANCVSVk6IKK596Is0Yjaixxew",
//       "v",            "5.131"
//    );
//    Путь = "/method/market.getCategories?" 
//        + СформироватьПараметрыGET(Параметры);

//    Попытка
//        // 2) HTTPS‑соединение
//        Соединение = Новый HTTPСоединение("api.vk.com", 443, );
//        Запрос     = Новый HTTPЗапрос(Путь);
//        // Запрос.Метод = "GET";
//        // Запрос.Путь   = Путь;

//        Ответ = Соединение.Получить(Запрос);
//        Если Ответ.КодСостояния <> 200 Тогда
//            Сообщить("HTTP‑ошибка VK API: " + Ответ.КодСостояния);
//            Возврат Ложь;
//        КонецЕсли;

//        // 3) Парсим JSON
//        ТелоJSON = Ответ.ПолучитьТелоКакСтроку();

//        Чтение = Новый ЧтениеJSON;
//        Чтение.УстановитьСтроку(ТелоJSON);
//        ДанныеVK = ПрочитатьJSON(Чтение);

//        // 4) Проверяем, есть ли в ответе поле "response"
//        Если ДанныеVK.Свойство("response") Тогда
//            Сообщить("Успешно: категорий – " 
//                + ДанныеVK.response.count);
//            Возврат Истина;
//        Иначе
//            Сообщить("VK вернул ошибку: " + ТелоJSON);
//            Возврат Ложь;
//        КонецЕсли;

//    Исключение
//        // 5) Обработка любых неожиданных ошибок
//        Сообщить("Ошибка при проверке VK: " 
//            + ОписаниеОшибки());
//        Возврат Ложь;
//    КонецПопытки;  // <-- ОБЯЗАТЕЛЬНО

//КонецФункции
